// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFactoryID = accounts[1]
    const originFactoryName = "John Doe"
    const originFactoryInformation = "Yarray Valley"
    const originFactoryLatitude = "-38.239770"
    const originFactoryLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best autos"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Factory: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function assembledItem() that allows a factory to assmble autos ", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Assembled()
        var event = supplyChain.Assembled()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as assembled by calling function assembledItem()
     await supplyChain.assembledItem(upc, originFactoryID, originFactoryName, originFactoryInformation, originFactoryLatitude, originFactoryLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFactoryID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFactoryID, 'Error: Missing or Invalid originFactoryID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a factory to process auto", async() => {
        // Declare and Initialize a variable for event
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var event = supplyChain.Processed();

        // Watch the emitted event Processed()
        await event.watch((err,res)=>{
        eventEmitted = true;
        })


        // Mark an item as Processed by calling function processItem()
        await supplyChain.processItem(upc, {from:originFactoryID});
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        
          // Verify the result set
          assert.equal(resultBufferTwo[5].toNumber(), 1, 'Error: Invalid item state')
        
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a factory to pack auto", async() => {
        // Declare and Initialize a variable for event
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var event = supplyChain.Packed();

        // Watch the emitted event Packed()
        await event.watch((err,res)=>{
        eventEmitted = true;
        })

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, {from:originFactoryID})
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferTwo[5].toNumber(), 2, 'Error: Invalid item state')
    
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a factory to sell Auto", async() => {
         // Declare and Initialize a variable for event
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        let event = supplyChain.ForSale();

        // Watch the emitted event ForSale()
        await event.watch((err,res)=>{
          eventEmitted = true;
        })

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice,  {from:originFactoryID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferTwo[5].toNumber(), 3, 'Error: Invalid item state')
          
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy auto", async() => {
        
        // Declare and Initialize a variable for event
        const supplyChain = await SupplyChain.deployed();
        
         // Declare and Initialize a variable for event
         let event = supplyChain.Sold()

         // Watch the emitted event Sold()
         await event.watch((err,res)=>{
           eventEmitted = true;
         });
           
        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc,{ from:distributorID,value:productPrice});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5].toNumber(), 4, 'Error: Invalid item state')
        
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship Auto", async() => {
        
        // Declare and Initialize a variable for event
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        let event = supplyChain.Shipped();

        // Watch the emitted event Shipped()
        await event.watch((err,res)=>{
          eventEmitted = true;
        })

        
        
        // Mark an item as Sold by calling function buyItem()
        await supplyChain.shipItem(upc, {from:distributorID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferTwo[5].toNumber(), 5, 'Error: Invalid item state')
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        
        // Declare and Initialize a variable for event
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        let event = supplyChain.Received();

        // Watch the emitted event Received()
        await event.watch((err,res)=>{
          eventEmitted = true;
        })
       
       // Mark an item as Sold by calling function receiveItem()
       await supplyChain.receiveItem(upc, {from:retailerID});
       
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
       
        // Verify the result set
        assert.equal(resultBufferTwo[5].toNumber(), 6, 'Error: Invalid item state')      
    })    
   
    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase auto", async () => {
        
        // Declare and Initialize a variable for event
        const supplyChain = await SupplyChain.deployed();
        
        // Declare and Initialize a variable for event
        let event = supplyChain.Purchased()
        
        // Watch the emitted event Purchased()
        await event.watch((err,res)=>{
            eventEmitted = true;
          })

        
        // Mark an item as Sold by calling function purchaseItem()
        await supplyChain.purchaseItem(upc, {from:consumerID})

    
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

    
        // Verify the result set
        assert.equal(resultBufferTwo[5].toNumber(), 7, 'Error: Invalid item state')

});

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        
        const supplyChain = await SupplyChain.deployed();
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFactoryID, 'Error: Missing or Invalid originFactoryID');
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName');
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation');
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude');
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude');
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {

        const supplyChain = await SupplyChain.deployed();
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferTwo[2].toString(), productID, 'Error: Invalid or Missing ProductID');
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid or Missing ProductNotes');
        assert.equal(resultBufferTwo[4].toNumber(), productPrice, 'Error: Invalid or Missing ProductPrice');
        assert.equal(resultBufferTwo[5].toNumber(), 7, 'Error: Invalid itemState');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid or Missing distributorID');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid or Missing retailerID');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid or Missing consumerID');
        
    })

});

