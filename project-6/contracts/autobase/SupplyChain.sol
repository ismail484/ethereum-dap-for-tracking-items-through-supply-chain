pragma solidity >=0.4.24;

import "../autoaccesscontrol/RetailerRole.sol";
import "../autoaccesscontrol/ConsumerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is RetailerRole, ConsumerRole {

  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Assembled,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
    }

  State constant defaultState = State.Assembled;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Factory, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFactoryID; // Metamask-Ethereum address of the Factory
    string  originFactoryName; // Factory Name
    string  originFactoryInformation;  // Factory Information
    string  originFactoryLatitude; // Factory Latitude
    string  originFactoryLongitude;  // Factory Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Assembled(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }


// Define a modifer that verifies the Caller
    modifier verifyCaller (address _address) {
        require(msg.sender == _address, "Caller is not verified"); 
        _;
    }

   
  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price, "User does not have enough money"); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is assembled
  modifier assembled(uint _upc) {
    require(items[_upc].itemState == State.Assembled, "Not assembled");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed, "Not Processed");
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed, "Not Packed");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale, "Not ForSale");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold, "Not Sold");
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped, "Not Shipped");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received, "Not Received");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased, "Not Purchased");
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }

  // Define a function 'assembledItem' that allows a factory to mark an item 'assembled'
  function assembledItem(uint _upc, address _originFactoryID, string _originFactoryName, string _originFactoryInformation, string  _originFactoryLatitude, string  _originFactoryLongitude, string  _productNotes) public
  {
    // Add the new item as part of Assembled
        items[_upc] = Item(
            sku,
            _upc,
            _originFactoryID,
            _originFactoryID,
            _originFactoryName,
            _originFactoryInformation,
            _originFactoryLatitude,
            _originFactoryLongitude,
            _upc + sku,
            _productNotes,
            0,
            defaultState,
            address(0),
            address(0),
            address(0)
        );

    
    // Increment sku
    sku = sku + 1;

    // Emit the appropriate event
    emit Assembled(_upc);
    
  }

  // Define a function 'processtItem' that allows a factory to mark an item 'Processed'
  // Call modifier to check if upc has passed previous supply chain stage
  // Call modifier to verify caller of this function
  function processItem(uint _upc) public 
  assembled(_upc)
  verifyCaller(msg.sender)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Processed;

    // Emit the appropriate event
     emit Processed(_upc);
  }

  // Define a function 'packItem' that allows a factory to mark an item 'Packed'
  // Call modifier to check if upc has passed previous supply chain stage
  // Call modifier to verify caller of this function
  function packItem(uint _upc) public 
  processed(_upc)
  verifyCaller(msg.sender)
  {
   // Update the appropriate fields
   items[_upc].itemState = State.Packed;
     
   // Emit the appropriate event
   emit Packed(_upc);
      
  }

  // Define a function 'sellItem' that allows a factory to mark an item 'ForSale'
  // Call modifier to check if upc has passed previous supply chain stage
  // Call modifier to verify caller of this function
  function sellItem(uint _upc, uint _price) public 
  packed(_upc)
  verifyCaller(msg.sender)
  {
   // Update the appropriate fields
   items[_upc].itemState = State.ForSale;
   items[_upc].productPrice = _price;
  
   // Emit the appropriate event
    emit ForSale(_upc);
    
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  // Call modifier to check if upc has passed previous supply chain stage  
  // Call modifer to check if buyer has paid enough
  // Call modifer to send any excess ether back to buyer
  function buyItem(uint _upc) public payable 
  forSale(_upc)
  paidEnough(items[_upc].productPrice)
  checkValue(_upc)
    {
    
    // Update the appropriate fields - ownerID, distributorID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].distributorID = msg.sender; 
    items[_upc].itemState = State.Sold;
      
       // Transfer money to factory
       items[_upc].originFactoryID.transfer(items[_upc].productPrice);

      
      // emit the appropriate event
      emit Sold(_upc);
    
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  // Call modifier to check if upc has passed previous supply chain stage
  // Call modifier to verify caller of this function
  function shipItem(uint _upc) public 
  sold(_upc)
  verifyCaller(msg.sender)
    {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;
    
    // Emit the appropriate event
    emit Shipped(_upc);
    
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  // Call modifier to check if upc has passed previous supply chain stage  
  // Access Control List enforced by calling Smart Contract / DApp
  function receiveItem(uint _upc) public shipped(_upc)
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
   items[_upc].ownerID = msg.sender;
   items[_upc].retailerID = msg.sender;
   items[_upc].itemState = State.Received;
  
   // Emit the appropriate event
   emit Received(_upc);    
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  // Call modifier to check if upc has passed previous supply chain stage
  // Access Control List enforced by calling Smart Contract / DApp
  function purchaseItem(uint _upc) public received(_upc)  
    {
      // Update the appropriate fields - ownerID, consumerID, itemState
      items[_upc].ownerID = msg.sender;
      items[_upc].consumerID = msg.sender;
      items[_upc].itemState = State.Purchased;
        
      // Emit the appropriate event
       emit Purchased(_upc);
    
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originFactoryID,
  string  originFactoryName,
  string  originFactoryInformation,
  string  originFactoryLatitude,
  string  originFactoryLongitude
  ) 
  {
  // Assign values to the 8 parameters
   itemSKU = items[_upc].sku;
   itemUPC = items[_upc].upc;
   ownerID = items[_upc].ownerID;
   originFactoryID = items[_upc].originFactoryID;
   originFactoryName = items[_upc].originFactoryName;
   originFactoryInformation = items[_upc].originFactoryInformation;
   originFactoryLatitude = items[_upc].originFactoryLatitude;
   originFactoryLongitude = items[_upc].originFactoryLongitude;
  
    
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originFactoryID,
  originFactoryName,
  originFactoryInformation,
  originFactoryLatitude,
  originFactoryLongitude
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  uint    itemState,
  address distributorID,
  address retailerID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    productID = items[_upc].productID;
    productNotes = items[_upc].productNotes;
    productPrice = items[_upc].productPrice;
    itemState = uint(items[_upc].itemState);
    distributorID = items[_upc].distributorID;
    retailerID = items[_upc].retailerID;
    consumerID = items[_upc].consumerID;
    
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  distributorID,
  retailerID,
  consumerID
  );
  }
}
